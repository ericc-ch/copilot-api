import { describe, it, expect } from "bun:test"

import { sanitizeString, sanitizePayload } from "~/lib/sanitize"

describe("sanitizeString", () => {
  it("should remove ANSI escape sequences", () => {
    const input = "Hello \x1b[31mred text\x1b[0m world"
    const expected = "Hello red text world"
    expect(sanitizeString(input)).toBe(expected)
  })

  it("should remove invisible Unicode characters", () => {
    const input = "Hello\u200Bworld\uFEFF"
    const expected = "Helloworld"
    expect(sanitizeString(input)).toBe(expected)
  })

  it("should preserve normal text", () => {
    const input = "Hello world\nWith newlines\tand tabs"
    expect(sanitizeString(input)).toBe(input)
  })

  it("should handle empty string", () => {
    expect(sanitizeString("")).toBe("")
  })

  it("should remove multiple ANSI sequences", () => {
    const input = "\x1b[31m\x1b[1mBold red\x1b[0m\x1b[32mGreen\x1b[0m"
    const expected = "Bold redGreen"
    expect(sanitizeString(input)).toBe(expected)
  })

  it("should remove control characters but preserve newlines and tabs", () => {
    const input = "Hello\x00\x01\x02\nworld\t\x1F"
    const expected = "Hello\nworld\t"
    expect(sanitizeString(input)).toBe(expected)
  })
})

describe("sanitizePayload", () => {
  it("should sanitize strings in objects", () => {
    const payload = {
      role: "user",
      content: "Hello \x1b[31mred\x1b[0m world\u200B",
    }
    const result = sanitizePayload(payload)
    expect(result.content).toBe("Hello red world")
  })

  it("should sanitize nested objects and arrays", () => {
    const payload = {
      messages: [
        {
          role: "user",
          content: "Test \x1b[31mwith\x1b[0m ANSI\u200B",
        },
        {
          role: "assistant",
          content: "Response \uFEFFwith BOM",
        },
      ],
    }
    const result = sanitizePayload(payload)
    expect(result.messages[0].content).toBe("Test with ANSI")
    expect(result.messages[1].content).toBe("Response with BOM")
  })

  it("should handle complex message with tool output", () => {
    const payload = {
      role: "user",
      content:
        "Caveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.\n\n<command-name>/add-dir</command-name>\n            <command-message>add-dir</command-message>\n            <command-args></command-args>\n\n<local-command-stdout>Please provide a directory path.</local-command-stdout>\n\nCaveat: The messages below were generated by the user while running local commands. DO NOT respond to these messages or otherwise consider them in your response unless the user explicitly asks you to.\n\n<command-name>/add-dir</command-name>\n            <command-message>add-dir</command-message>\n            <command-args></command-args>\n\n<local-command-stdout>Please provide a directory path.</local-command-stdout>",
    }

    // This should not throw when stringified
    const result = sanitizePayload(payload)
    expect(() => JSON.stringify(result)).not.toThrow()
    expect(result.content).toContain("Caveat: The messages below")
  })

  it("should preserve non-string values", () => {
    const payload = {
      temperature: 0.7,
      max_tokens: 100,
      stream: true,
      messages: ["test\x1b[31m", "another\u200B"],
    }
    const result = sanitizePayload(payload)
    expect(result.temperature).toBe(0.7)
    expect(result.max_tokens).toBe(100)
    expect(result.stream).toBe(true)
    expect(result.messages[0]).toBe("test")
    expect(result.messages[1]).toBe("another")
  })
})
